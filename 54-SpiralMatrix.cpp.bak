/*=============================================================================
#     FileName: 54-SpiralMatrix.cpp
#         Desc: 
#       Author: qsword
#        Email: huangjian1993@gmail.com
#     HomePage: 
#      Created: 2015-04-11 10:11:14
#      Version: 0.0.1
#   LastChange: 2015-04-11 10:11:14
#      History:
#               0.0.1 | qsword | init
=============================================================================*/

#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;

class Solution {
public:
    
    int getBaseNum(int m, int n, int round) {
        int sum = 0;
        for (int i = 0; i < round; i ++) {
            if (m < 1 || n < 1) {
                return sum;
            }
            if (m == 1) {
                return sum + n;
            }
            if (n == 1) {
                return sum + m;
            }
            sum += 2 * (m + n - 2);
            m -= 2;
            n -= 2;
        }
        return sum;
        
    }
    //run time error
    vector<int> spiralOrder(vector<vector<int> > &matrix) {
        if (matrix.empty() || matrix[0].empty()) {
            vector<int> result;
            return result;
        }
        int m = matrix.size(), n = matrix[0].size();
        vector<int> result(n * m);
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                int round = min(min(i, j), min(m - 1 - i, n - 1 - j));
                int baseNum = getBaseNum(m, n, round);
                int tmpM = m - 2 * round, tmpN = n - 2 * round, tmpI = i - round, tmpJ = j - round;
                if (tmpI == 0) {
                    baseNum += tmpJ;
                } else if (tmpJ == 0) {
                    baseNum += (2 * (tmpM + tmpN) - tmpI - 4);
                } else if (tmpI == tmpN - 1) {
                    baseNum += (tmpM + 2 * tmpN - tmpJ - 3);
                } else {
                    baseNum += (tmpM + tmpI - 1);
                }
                cout << baseNum << " ";
                result[baseNum] = matrix[i][j];
            }
        }
        cout << endl;
        return result;
    }
};

int main() {
    vector<vector<int> > matrix(4, vector<int>(4, 0));
    for (int i = 0; i < 4; i ++) {
        for (int j = 0; j < 4; j ++) {
            matrix[i][j] = i * 4 + j + 1;
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
    Solution solution;
    vector<int> result = solution.spiralOrder(matrix);
    for (int i = 0; i < result.size(); i ++) {
        cout << result[i] << " ";
    }
    cout << endl;
    return 0;
}
