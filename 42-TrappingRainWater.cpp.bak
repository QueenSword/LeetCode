/*=============================================================================
#     FileName: 42-TrappingRainWater.cpp
#         Desc: 
#       Author: qsword
#        Email: huangjian1993@gmail.com
#     HomePage: 
#      Created: 2015-04-08 11:35:56
#      Version: 0.0.1
#   LastChange: 2015-04-08 11:35:56
#      History:
#               0.0.1 | qsword | init
=============================================================================*/

#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int trap(int A[], int n) {
        if (n < 3) {
            return 0;
        }
        int result = 0;
        vector<int> points;
        int tmp = 1;
        while (tmp < n) {
            while (tmp < n && A[tmp] >= A[tmp - 1]) {
                tmp ++;
            }
            points.push_back(tmp - 1);
            while (tmp < n && A[tmp] <= A[tmp - 1]) {
                tmp ++;
            }
        }
        for (int i = 0; i < points.size(); i ++) {
            cout << points[i] << " ";
        }
        vector<int>::iterator it = points.begin() + 1;
        while (it < points.end() - 1) {
            if (*(it) <= *(it - 1) && *it <= *(it + 1)) {
                points.erase(it);
            } else {
                it ++;
            }
        }
        cout << endl;
        for (int i = 0; i < points.size(); i ++) {
            cout << points[i] << " ";
        }
        cout << endl
        for (int i = 1; i < points.size(); i ++) {
            result += min(A[points[i]], A[points[i - 1]]) * (points[i] - points[i - 1] - 1);
        }
        return result;
    }
};

int main() {
    int A[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
    Solution solution;
    cout << solution.trap(A, 12) << endl;
    return 0;
}
