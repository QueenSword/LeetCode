/*=============================================================================
#     FileName: 44-WildcardMatching.cpp
#         Desc: 
#       Author: qsword
#        Email: huangjian1993@gmail.com
#     HomePage: 
#      Created: 2015-04-08 15:35:55
#      Version: 0.0.1
#   LastChange: 2015-04-08 15:35:55
#      History:
#               0.0.1 | qsword | init
=============================================================================*/

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>

using namespace std;

class Solution {
public:

    //TIMEOUT
    bool isMatch1(const char *s, const char *p) {
        if (*p == '\0') {
            return *s == '\0';
        }
        if (*s == '\0') {
            while (*p == '*') {
                p ++;
            }
            return *p == '\0';
        }
            if (*p == '?') {
                return isMatch(s + 1, p + 1);
            } else if (*p == '*') {
                while (*s != '\0') {
                    if (isMatch(s, p + 1)) {
                        return true;
                    }
                    s ++;
                }
                return isMatch(s, p + 1);
            } else {
                return *p == *s ? isMatch(s + 1, p + 1) : false;
            }
    }
    bool isMatch(const char *s, const char *p) {
        int sLeng = strlen(s), pLeng = strlen(p);
        vector<vector<bool> > dp(sLeng + 1, vector<bool>(pLeng + 1, false));
        for (int i = 0; i <= pLeng; i ++) {
            if (i == 0) {
                dp[0][i] = true;
                continue;
            }
            dp[0][i] = p[i - 1] == '*' ? dp[0][i - 1] : false;
        }
        for (int j = 1; j <= pLeng; j ++) {
            for (int i = 1; i <= sLeng; i ++) {
                if (s[i - 1] == p[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p[j - 1] == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p[j - 1] == '*') {
                    for (int k = 0; k < i; k ++) {
                        if (dp[k][j - 1]) {
                            dp[i][j] = true;
                            break;
                        }
                    }    
                } else {
                    dp[i][j] = false;
                }
                 
            }
        }
        return dp[sLeng][pLeng];
    }
};

int main() {
    freopen("in.txt", "r", stdin);
    Solution solution;
    for (int i = 0; i < 7; i ++) {
        char a[20], b[20];
        cin >> a >> b;
        cout << solution.isMatch(a, b) << endl;
    }
    return 0;
}
