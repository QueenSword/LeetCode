/*=============================================================================
#     FileName: 130-SurroundedRegions.cpp
#         Desc: 
#       Author: qsword
#        Email: huangjian1993@gmail.com
#     HomePage: 
#      Created: 2015-05-09 17:53:39
#      Version: 0.0.1
#   LastChange: 2015-05-09 17:53:39
#      History:
#               0.0.1 | qsword | init
=============================================================================*/

#include <stdio.h>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <string>

using namespace std;

class Solution {
public:
    void solve(vector<vector<char> >& board) {
        if (board.size() < 3) {
            return ;
        }
        int m = board.size(), n = board[0].size();
        if (n < 3) {
            return ;
        }
        for (int i = 0; i < n; i ++) {
            if (board[0][i] == 'O') {
                board[0][i] = 'L';
            }
            if (board[m - 1][i] == 'O') {
                board[m - 1][i] = 'L';
            }
        }
        for (int i = 0; i < m; i ++) {
            if (board[i][0] == 'O') {
                board[i][0] = 'L';
            }
            if (board[i][n - 1] == 'O') {
                board[i][n - 1] = 'L';
            }
        }
        int i1 = 0, i2 = m - 1, j1 = 0, j2 = n - 1;
        while (i2 - i1 > 1 && j2 - j1 > 1) {
            for (int i = j1; i <= j2; i ++) {
                if (board[i1][i] == 'L') {
                    if (board[i1 + 1][i] == 'O') {
                        board[i1 + 1][i] = 'L';
                        int j = i - 1;
                        while (j >= j1 && board[i1 + 1][j] == 'O') {
                            board[i1 + 1][j --] = 'L';
                        }
                        j = i + 1;
                        while (j <= j2 && board[i1 + 1][j] == 'O') {
                            board[i1 + 1][j ++] = 'L';
                        }
                        j = i1 + 2;
                        while (j <= i2 && board[j][i] == 'O') {
                            board[j ++][i] = 'L';
                        }
                    }
                }
                if (board[i2][i] == 'L') {
                    if (board[i2 - 1][i] == 'O') {
                        board[i2 - 1][i] = 'L';
                        int j = i - 1;
                        while (j >= j1 && board[i2 - 1][j] == 'O') {
                            board[i2 - 1][j --] = 'L';
                        }
                        j = i + 1;
                        while (j <= j2 && board[i2 - 1][j] == 'O') {
                            board[i2 - 1][j ++] = 'L';
                        }
                        j = i2 - 2;
                        while (j >= i1 && board[j][i] == 'O') {
                            board[j --][i] = 'L';
                        }
                    }
                }
            }
            for (int i = i1; i <= i2; i ++) {
                if (board[i][j1] == 'L') {
                    if (board[i][j1 + 1] == 'O') {
                        board[i][j1 + 1] = 'L';
                        int j = i - 1;
                        while (j >= i1 && board[j][j1 + 1] == 'O') {
                            board[j --][j1 + 1] = 'L';
                        }
                        j = i + 1;
                        while (j <= i2 && board[j][j1 + 1] == 'O') {
                            board[j ++][j1 + 1] = 'L';
                        }
                        j = j1 + 2;
                        while (j <= j2 && board[i][j] == 'O') {
                            board[i][j ++] = 'L';
                        }
                    }
                }
                if (board[i][j2] == 'L') {
                    if (board[i][j2 - 1] == 'O') {
                        board[i][j2 - 1] = 'L';
                        int j = i - 1;
                        while (j >= i1 && board[j][j2 - 1] == 'O') {
                            board[j --][j2 - 1] = 'L';
                        }
                        j = i + 1;
                        while (j <= i2 && board[j][j2 - 1] == 'O') {
                            board[j ++][j2 - 1] = 'L';
                        }
                        j = j2 - 2;
                        while (j >= j1 && board[i][j] == 'O') {
                            board[i][j --] = 'L';
                        }
                    }
                }
            }
            i1 ++;
            i2 --;
            j1 ++;
            j2 --;
        }
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == 'L') {
                    board[i][j] = 'O';
                }
            }
        }
        
        
    }
};

int main() {
    srand(100);
    string strs[] = {"OXOOOX","OOXXXO","XXXXXO","OOOOXX","XXOOXO","OOXXXX"};
    vector<vector<char> > board;
    for (int i = 0; i < 6; i ++) {
        vector<char> b;
        for (int j = 0; j < strs[i].length(); j ++) {
            //char c = rand() % 2 ? 'O' : 'X';

            b.push_back(strs[i][j]);
        }
        board.push_back(b);
    }
    for (int i = 0; i < board.size(); i ++) {
        for (int j = 0; j < board[0].size(); j ++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    Solution solution;
    solution.solve(board);
    for (int i = 0; i < board.size(); i ++) {
        for (int j = 0; j < board[0].size(); j ++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
}
